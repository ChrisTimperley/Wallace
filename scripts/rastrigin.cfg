algorithm/simple_evolutionary_algorithm {

  # Could determine the fitness of the individual from the return type
  # of the evaluator?
  evaluator: evaluator/simple {
    objective: "
      f = 1000.0
      for x in get(i.vec)
        f += x*x - 10.0 * cos(2.0 * pi * x)
      end
      SimpleFitness{Float}(false, f)
    "
  }

#  loggers: [
#    logger/best_individual {}
#    logger/population_dump {}
#  ]

  replacement: replacement/generational { elitism: 0 }
  termination: {
    iterations: criterion/iterations { limit: 1000 }
  }
  _my_species: {
    fitness: "SimpleFitness{Float}"
    stages: {
      vec: {
        representation: representation/float_vector { length: 100, min: -5.12, max: 5.12 }
      }
    }
  }
  
  _my_breeder: breeder/fast {
    sources: {
      s: selection { operator: selection/tournament { size: 2 } }
      x: variation { operator: crossover/one_point { rate: 1.0 }, source: "s", stage: "vec" }
      m: variation { operator: mutation/gaussian { rate: 0.01, mean: 0.0, std: 1.0  }, source: "x", stage: "vec" }
      #m: variation { operator: mutation/uniform { rate: 0.05, min: 0, max: 1 }, source: "x", stage: "bits" }
    }
  }
  population: {
    demes: [
      {capacity: 100, species: $(_my_species), breeder: $(_my_breeder)}
    ]
  }
}
