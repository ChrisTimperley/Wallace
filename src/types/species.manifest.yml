id: species
description: |
  Placeholder description for species type.

composer: |
  println("- composing species.")

  # Compose each of the stages for this species.
  println("-- composing species stages.")
  for (name, stage::Dict{Any, Any}) in s["stages"]
    stage["label"] = name
    s["stages"][name] = compose_as(stage, "species#stage")
  end

  # Compose the fitness scheme for this species.
  # Default to maximization of a float scalar.
  println("-- composing fitness.")
  s["fitness"] = Base.get(s, "fitness", Dict{Any, Any}(
    "type" => "fitness/scalar",
    "maximise" => true,
    "of" => "Float"
  ))
  s["fitness"] = compose_as(s["fitness"], s["fitness"]["type"])

  # Compose the individual type.
  println("-- composing individual type.")
  I = compose_as(Dict{Any, Any}(
    "fitness" => s["fitness"],
    "stages" => s["stages"]
  ), "individual")

  # Instantiate this species.
  Species{I}(Dict{String, SpeciesStage}(s["stages"]), s["fitness"])
