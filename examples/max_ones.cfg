type: algorithm/simple_evolutionary_algorithm

evaluator<simple>:
  objective: |
    SimpleFitness{Int}(true, sum(get(i.bits)))

replacement<replacement/generational> { elitism: 0 }

termination:
  iterations<iterations>: { limit: 1000 }

_my_species:
  fitness: SimpleFitness{Int}
  stages:
    bits:
      representation<bit_vector>: { length: 100 }

_my_breeder<fast>:
  sources:
    s<selection>: { operator: selection/tournament { size: 2 } }
    x<variation>: { operator: crossover/one_point { rate: 1.0 }, source: "s", stage: "bits" }
    m<variation>: { operator: mutation/bit_flip { rate: 0.1 }, source: "x", stage: "bits" }


population:
  demes:
    - {capacity: 100, species: $(_my_species), breeder: $(_my_breeder)}
