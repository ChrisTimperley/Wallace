type: algorithm/simple_evolutionary_algorithm

evaluator<evaluator/multiplexer>: { bits: 3 }

replacement<replacement/generational>: { elitism: 0 }

termination:
  iterations<criterion/iterations>: { limit: 1000 }

_my_species:
  fitness: "SimpleFitness{Int64}"
  stages:
    tree:
      representation<representation/koza_tree>:
        min_depth: 1
        max_depth: 17
        inputs:
          - "a0::Bool"
          - "a1::Bool"
          - "a2::Bool"
          - "d0::Bool"
          - "d1::Bool"
          - "d2::Bool"
          - "d3::Bool"
          - "d4::Bool"
          - "d5::Bool"
          - "d6::Bool"
          - "d7::Bool"
        terminals:
          - "true::Bool"
          - "false::Bool"
          - "a0::Bool"
          - "a1::Bool"
          - "a2::Bool"
          - "d0::Bool"
          - "d1::Bool"
          - "d2::Bool"
          - "d3::Bool"
          - "d4::Bool"
          - "d5::Bool"
          - "d6::Bool"
          - "d7::Bool"
        non_terminals:
          - "and(a::Bool, b::Bool)::Bool = a && b"
          - "or(a::Bool, b::Bool)::Bool = a || b"
          - "not(a::Bool)::Bool = !a"
          - "if_then_else(a::Bool, b::Bool, c::Bool)::Bool = if a; b; else; c; end"
  
_my_breeder<breeder/fast>:
  sources:
    s<selection>:
      operator<selection/tournament>: { size: 7 }
    m<variation>:
      operator<mutation/subtree>: { rate: 0.01 }
      source: s
      stage:  tree
    x<variation>:
      operator<crossover/subtree>: { rate: 0.9 }
      source: m
      stage: tree

population:
  demes:
    - capacity: 100
      species:  $(_my_species)
      breeder:  $(_my_breeder)
